# Gitlab CI/CD Pipeline that includes
#
# - Code lint + build checks
# - Code unit tests checks
# - npm publish to gitlab npm registry
#
# Reference:
# - https://docs.gitlab.com/ee/ci/yaml/index.html

default:
  interruptible: true

image: node:16-alpine

stages:
  - ci
  - release

workflow:
  rules:
    - if: '$CI_COMMIT_MESSAGE == "chore(release): publish"'
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /^chore\:.+$/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /^docs\:.+$/
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: always

# Set branch-based environment variables -- shared for all jobs
variables:
  NODE_ENV: CI
  GL_TOKEN: ${CI_JOB_TOKEN}
  HUSKY: 0

# CI -- continuous integration via build + tests
rebase:
  stage: ci
  before_script:
    # Install deps
    - which ssh-agent || apk add git openssh-client
    # Add ssh keys
    - eval $(ssh-agent -s)
    # SSH_KEY has been generated first from ssh-keygen and added as Deploy key. Settings > Repository > Deploy key
    - echo "${CI_SSH_PRIVATE_KEY_BOT}" | tr -d '\r' | ssh-add - > /dev/null
    # Set up the SSH key and the known_hosts file
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # before running this job all code versions must be pushed -- missing at node:16-latest docker image
    - git config --global user.email "${CI_GIT_USER_EMAIL_BOT}"
    - git config --global user.name "${CI_GIT_USER_USERNAME_BOT}"
  script:
    # Set the remote url with SSH for private repositories
    - git remote set-url --push origin git@gitlab.com:${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git
    # Required so that Changesets can compare with main branch
    - git config --global --add safe.directory /builds/path/to/project-name
    - git pull -f --no-tags --rebase origin master:master
    # Rebase exit with error code (1) if it is outdated from base
    - echo "Checking $(git rev-parse --abbrev-ref HEAD) against master"
    - if ! git rebase master; then echo "Branch $(git rev-parse --abbrev-ref HEAD) is outdated from master"; fi
  when: always

build-and-test:
  stage: ci
  image: node:20-alpine
  script:
    - npm ci --ignore-scripts
    - npm run prettier
    - npm run lint
    - npm run build --if-present
    - npm test
  artifacts:
    paths:
      - packages/*/build/
    expire_in: 1 week
  when: always
  only:
    - develop

# CD -- continuous delivery via npm publish
publish:
  stage: release
  before_script:
    # Install deps
    - which ssh-agent || apk add git openssh-client
    # Add ssh keys
    - eval $(ssh-agent -s)
    # SSH_KEY has been generated first from ssh-keygen and added as Deploy key. Settings > Repository > Deploy key
    - echo "${CI_SSH_PRIVATE_KEY_BOT}" | tr -d '\r' | ssh-add - > /dev/null
    # Set up the SSH key and the known_hosts file
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # before running this job all code versions must be pushed -- missing at node:16-latest docker image
    - git config --global user.email "${CI_GIT_USER_EMAIL_BOT}"
    - git config --global user.name "${CI_GIT_USER_USERNAME_BOT}"
    # Force npm to always require authentication when accessing the registry, even for GET requests.
    - npm config set always-auth true
  script:
    # Set the remote url with SSH for private repositories
    - git remote set-url --push origin git@gitlab.com:cdc3-dev/toolbox.git
    - git fetch && git symbolic-ref -q HEAD > /dev/null || (git branch -d ${CI_COMMIT_REF_NAME} || true && git checkout -b ${CI_COMMIT_REF_NAME} && git branch --set-upstream-to=origin/${CI_COMMIT_REF_NAME} ${CI_COMMIT_REF_NAME})
    - git remote show origin
    # Install root project dependencies including Lerna
    - npm ci --ignore-scripts
    # Version - identifies packages that have been updated since the previous tagged release
    - if [ "${CI_COMMIT_BRANCH}" = "develop" ]; then npm run version:prerelease:ci; else npm run version:ci; fi
    # Publish
    - npm run release:ci
  needs:
    - build-and-test
  when: on_success
  only:
    - develop
